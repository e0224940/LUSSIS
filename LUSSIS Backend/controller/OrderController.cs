using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using LUSSIS_Backend.dao;
using LUSSIS_Backend.model;

namespace LUSSIS_Backend.controller
{
    public static class OrderController
    {
        // ATTRIBUTES

        static LussisEntities context = new LussisEntities();

        // METHODS

        public static List<OrderItem> GetAutoGeneratedOrderList()
        {
            // Create empty OrderList
            List<OrderItem> orderList = new List<OrderItem>();

            // Get all Stocks
            List<StationeryCatalogue> allStockList = StoreClerkDao.GetAllStocks(context);

            // For each Stock
            for (int i = 0; i < allStockList.Count; i++)
            {
                StationeryCatalogue stock = allStockList[i];

                // Get OrderQty
                int? orderQty = GetOrderQty(context, stock.ItemNo);

                // If OrderQty > 0, create OrderItem
                if (orderQty > 0)
                {
                    OrderItem orderItem = new OrderItem(stock);
                    orderItem.OrderQtyList[0] = orderQty;
                    orderList.Add(orderItem);
                }
            }

            return orderList;
        }

        public static int GetStoreSupervisorEmpNo()
        {
            LussisEntities context = new LussisEntities();
            return context.StoreAssignments.Where(x => x.Role.Equals("Supervisor")).FirstOrDefault().EmpNo;
        }

        public static List<StationeryCatalogue> GetStockList(List<OrderItem> orderList)
        {
            // Create empty StockList
            List<StationeryCatalogue> stockList = new List<StationeryCatalogue>();

            // Get all Stocks
            List<StationeryCatalogue> allStockList = StoreClerkDao.GetAllStocks(context);

            // For each Stock
            for (int i = 0; i < allStockList.Count; i++)
            {
                StationeryCatalogue stock = allStockList[i];
                string itemNo = stock.ItemNo;
                bool found = false;

                // Check in OrderList
                for (int j = 0; j < orderList.Count; j++)
                {
                    if (orderList[j].Stock.ItemNo.Equals(itemNo))
                    {
                        found = true;
                        break;
                    }
                }

                // Add to StockList if not found
                if (!found)
                {
                    stockList.Add(stock);
                }
            }

            return stockList;
        }

        public static List<StationeryCatalogue> GetAllStocks()
        {
            return StoreClerkDao.GetAllStocks(context);
        }

        public static List<OrderItem> GetOrderListFromPage(List<string> itemNoList, List<string> supplierNameList, List<int> orderQtyList)
        {
            // Create empty OrderList
            List<OrderItem> orderList = new List<OrderItem>();

            OrderItem orderItem = null;
            string previousItemNo = "";
            int supplierIndex = 0;

            // For each element
            for (int i = 0; i < itemNoList.Count; i++)
            {
                string itemNo = itemNoList[i];
                string supplier = supplierNameList[i];
                int orderQty = orderQtyList[i];

                if (itemNo != previousItemNo)
                {
                    // Create OrderItem if New ItemNo
                    StationeryCatalogue stock = StoreClerkDao.GetStock(context, itemNo);
                    orderItem = new OrderItem(stock);
                    orderItem.OrderQtyList[0] = orderQty;
                    orderList.Add(orderItem);
                    supplierIndex = 1;
                }
                else
                {
                    // Update OrderItem if Existing ItemNo
                    orderItem.OrderQtyList[supplierIndex] = orderQty;
                    supplierIndex++;
                }
                previousItemNo = itemNo;
            }

            return orderList;
        }

        public static OrderItem AddOrder(List<OrderItem> orderList, string itemNo)
        {
            // Get Stock
            StationeryCatalogue stock = StoreClerkDao.GetStock(context, itemNo);

            // Create orderItem
            OrderItem orderItem = new OrderItem(stock);
            int? orderQty = GetOrderQty(context, itemNo);
            if (orderQty > 0)
            {
                orderItem.OrderQtyList[0] = GetOrderQty(context, itemNo);
            }
            else
            {
                orderItem.OrderQtyList[0] = stock.ReorderQty;
            }


            // Add to orderList
            orderList.Add(orderItem);

            return orderItem;
        }

        public static OrderItem DeleteOrder(List<OrderItem> orderList, string itemNo)
        {
            // Find Stock in orderList
            for (int i = 0; i < orderList.Count; i++)
            {
                // Delete Stock if found
                OrderItem orderItem = orderList[i];
                if (orderItem.Stock.ItemNo.Equals(itemNo))
                {
                    orderList.Remove(orderItem);
                    return orderItem;
                }
            }
            return null;
        }

        public static List<OrderItem> SubmitOrder(List<OrderItem> orderList, int orderedBy, int approvedBy, DateTime dateIssued)
        {
            // Create empty POList
            List<PurchaseOrder> pOList = new List<PurchaseOrder>();

            // For each OrderItem
            for (int i = 0; i < orderList.Count; i++)
            {
                OrderItem orderItem = orderList[i];
                string itemNo = orderItem.Stock.ItemNo;

                // Qty > 0?
                for (int j = 0; j < orderItem.OrderQtyList.Count; j++)
                {
                    string supplierCode = orderItem.SupplierCodeList[j];
                    int? qty = orderItem.OrderQtyList[j];
                    if (qty > 0)
                    {
                        // Create or Get PurchaseOrder
                        PurchaseOrder pO1 = CreatePurchaseOrder(context, supplierCode, orderedBy, dateIssued, approvedBy, pOList);
                        int pONo = pO1.PONo;

                        // Create PurchaseOrderDetail
                        PurchaseOrderDetail pOD1 = CreatePurchaseOrderDetail(context, pONo, itemNo, qty);
                    }
                }
            }

            return orderList;
        }

        public static StationeryCatalogue GetStock(string itemNo)
        {
            return StoreClerkDao.GetStock(context, itemNo);
        }

        public static List<Supplier> GetAllSuppliers()
        {
            return StoreClerkDao.GetAllSuppliers(context);
        }

        public static Supplier GetSupplier(string supplierCode)
        {
            return StoreClerkDao.GetSupplier(context, supplierCode);
        }

        // PRIVATE METHODS

        private static int? GetOrderQty(LussisEntities context, string itemNo)
        {
            StationeryCatalogue stock = StoreClerkDao.GetStock(context, itemNo);

            // Find ReorderLevel
            int? reorderLevel = stock.ReorderLevel;

            // Find CurrentQty
            int? currentQty = stock.CurrentQty;

            // Find TotalAdjustmentQty
            int? adjustmentQty = StoreClerkDao.GetTotalPendingAdjustmentQtyForStock(context, itemNo);

            // Find TotalPurchaseOrderQty
            int? purchaseQty = StoreClerkDao.GetTotalPendingPurchaseQtyForStock(context, itemNo);

            // Find OrderQty
            int? orderQty = (reorderLevel - currentQty - adjustmentQty - purchaseQty);
            if (orderQty > 0 && orderQty < stock.ReorderQty)
            {
                orderQty = stock.ReorderQty;
            }

            return orderQty;
        }

        private static PurchaseOrder CreatePurchaseOrder(LussisEntities context, string supplierCode, int orderedBy, DateTime dateIssued, int approvedBy, List<PurchaseOrder> pOList)
        {
            // Check if SupplierCode inside pOList
            PurchaseOrder pO = pOList.Where(x => x.SupplierCode.Equals(supplierCode)).FirstOrDefault();

            if (pO == null)
            {
                // Create PurchaseOrder
                pO = new PurchaseOrder();
                pO.SupplierCode = supplierCode;
                pO.OrderedBy = orderedBy;
                pO.DateIssued = dateIssued;
                pO.ApprovedBy = approvedBy;
                pO.Status = "Pending";
                pO = StoreClerkDao.Add(context, pO);
                pOList.Add(pO);
            }

            return pO;
        }

        private static PurchaseOrderDetail CreatePurchaseOrderDetail(LussisEntities context, int pONo, string itemNo, int? qty)
        {
            // Create PurchaseOrderDetail
            PurchaseOrderDetail pOD = new PurchaseOrderDetail();
            pOD.PONo = pONo;
            pOD.ItemNo = itemNo;
            pOD.Qty = qty;
            pOD = StoreClerkDao.Add(context, pOD);
            return pOD;
        }
    }
}
